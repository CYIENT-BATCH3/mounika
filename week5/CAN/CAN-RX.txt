
// PIC18F458 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1H
#pragma config OSC = HS         // Oscillator Selection bits (HS oscillator)
#pragma config OSCS = OFF       // Oscillator System Clock Switch Enable bit (Oscillator system clock switch option is disabled (main oscillator is source))

// CONFIG2L
#pragma config PWRT = OFF       // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOR = ON         // Brown-out Reset Enable bit (Brown-out Reset enabled)
#pragma config BORV = 25        // Brown-out Reset Voltage bits (VBOR set to 2.5V)

// CONFIG2H
#pragma config WDT = ON         // Watchdog Timer Enable bit (WDT enabled)
#pragma config WDTPS = 128      // Watchdog Timer Postscale Select bits (1:128)

// CONFIG4L
#pragma config STVR = ON        // Stack Full/Underflow Reset Enable bit (Stack Full/Underflow will cause Reset)
#pragma config LVP = ON         // Low-Voltage ICSP Enable bit (Low-Voltage ICSP enabled)

// CONFIG5L
#pragma config CP0 = OFF        // Code Protection bit (Block 0 (000200-001FFFh) not code protected)
#pragma config CP1 = OFF        // Code Protection bit (Block 1 (002000-003FFFh) not code protected)
#pragma config CP2 = OFF        // Code Protection bit (Block 2 (004000-005FFFh) not code protected)
#pragma config CP3 = OFF        // Code Protection bit (Block 3 (006000-007FFFh) not code protected)

// CONFIG5H
#pragma config CPB = OFF        // Boot Block Code Protection bit (Boot Block (000000-0001FFh) not code protected)
#pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM not code protected)

// CONFIG6L
#pragma config WRT0 = OFF       // Write Protection bit (Block 0 (000200-001FFFh) not write protected)
#pragma config WRT1 = OFF       // Write Protection bit (Block 1 (002000-003FFFh) not write protected)
#pragma config WRT2 = OFF       // Write Protection bit (Block 2 (004000-005FFFh) not write protected)
#pragma config WRT3 = OFF       // Write Protection bit (Block 3 (006000-007FFFh) not write protected)

// CONFIG6H
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) not write protected)
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot Block (000000-0001FFh) not write protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write protected)

// CONFIG7L
#pragma config EBTR0 = OFF      // Table Read Protection bit (Block 0 (000200-001FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR1 = OFF      // Table Read Protection bit (Block 1 (002000-003FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR2 = OFF      // Table Read Protection bit (Block 2 (004000-005FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR3 = OFF      // Table Read Protection bit (Block 3 (006000-007FFFh) not protected from Table Reads executed in other blocks)

// CONFIG7H
#pragma config EBTRB = OFF      // Boot Block Table Read Protection bit (Boot Block (000000-0001FFh) not protected from Table Reads executed in other blocks)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#include <stdio.h>
#define _XTAL_FREQ 20000000//setting frequency
#define ADDR1 0x0F;
#define ADDR2 0x04;
#define ENABLE 1;
#define DISABLE 0;
enum modes{CONFIG_MODE = 0X80,NORMAL_MODE = 0X08}; //convert the configuration mode to normal mode
//declare the different function for different operation

void System_init(); //declaring the functions
void CAN_init();  //CAN initializatio
void Set_baudrate();//Set baud rate
//void CAN_write();
//void CAN_write2();
void mask_filter(); //initialise the mask filter
void acc_filter(); //initialize the acceptance filter
void CAN_read(); //CAN read initialize
void LED(); //initialize the LED function
int frame[100]; //initiaize the frame
int main(){
    
System_init();//calling the function     

CAN_init(); //calling the function  
Set_baudrate(); //calling the function  
mask_filter(); //calling the function  
acc_filter(); //calling the function  
while(1){
}//CAN_write();   
__delay_ms(1000);
//CAN_write2();    }
}
void System_init()
{ 
    GIE =ENABLE;  //enables the global interrupts 
    PEIE = ENABLE;
}void CAN_init()
{
    
TRISBbits.RB0 = 0;
TRISBbits.RB3 = 1;//    
TRISBbits.RB2 = 0; //transmitting pin in MCU
RB0=0;
RXB0IP =1; 
RXB0IE=1;
}
void Set_baudrate()
{
    
CANCON = CONFIG_MODE;
while(CANSTAT != CONFIG_MODE);
BRGCON1 = 0XC1;// Synchronization Jump Width Time = 4 x TQ  //000001 = TQ = (2 x 2)/FOSC    BRGCON2 = 0XAE;           //1 = Freely programmable//101 = Phase Segment 1 Time = 6 x TQ//110 = Propagation Time = 7 x TQ    BRGCON3 = 0X45;               CIOCON = 0X20;    CANCON = NORMAL_MODE;
}
void mask_filter()
{
    RXM0SIDH=0x00;
    RXM0SIDL=0x00;
}
void acc_filter()
{
    RXF0SIDH=0x00;
    RXF0SIDL=0x00;
}
void __interrupt()ISR1()
{
    
PORTBbits.RB0=1;
if(RXB0IF==1){
    
RXB0IF=0; 
CAN_read();
//LED();    }
}
}
void CAN_read(){
    CANCON=0X0E; 
    RXB0CON=0x00;
    frame[0]=RXB0SIDH; 
    frame[1]=RXB0SIDL; 
    frame[2]=RXB0DLC; 
    frame[3]=RXB0D0; 
    frame[4]=RXB0D1; 
    frame[5]=RXB0D2; 
    frame[6]=RXB0D3; 
    frame[7]=RXB0D4; 
    frame[8]=RXB0D5; 
    frame[9]=RXB0D6;
    frame[10]=RXB0D7; 
    RXB0FUL=0; 
    LED();
}
void LED()
{
    if(frame[4]==0XFF && frame[7]==0XFF){
     __delay_ms(1000);
     PORTBbits.RB0=0;
    }
}

